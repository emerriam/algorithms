exit
board
board.@grid
board.grid
board
n
exit
@grid[row] = []
@grid[row]
rows
row
@grid
exit
start_pos
start_pos.position
exit
start_pos.position
start_pos
board
exit
board
exit
board
boare
exit
exitr
board[3][3]
board
exit
exist
root.right
root.left
root
exit
root.left.nil?
root.right
root.left
root
c
path
x
c
root.left
root.val
path_size
path
c
root.val
exit
c
exit
root.left
root.val
exit
node[i]
nodes
j
eval i
c
eval i
i
j
exit
c
routes
c
routes
exit
nodes
leaves
exit
nodes
leaves
c
exit
c
collector.include?(root.left)
collector
exit
collector
exit
collector
c
collector[1]
collector[0]
collector.size
collector
c
exit
collector.size
collector
x.size
x
exit
x
c
exit
collector
exit
collector[20]
collector[21]
collector[21][1]
collector.each { |x| print "#{x}\n" }
collector.each { |x| print x }
collector
collector[0]
collector.size
c
exit
c
routes
root.value
exit
root.DFT_in_order_iterative(root)
exit
root.BFT_iterattive(root)
exit
st.size
exit
st.count
st.size
exit
st.to_a
exit
st.to_a
exit
st
st.to_a
st
exit
x[4]
x[4[
x
c
exit
root.right
root.right.value
root.left.value
root.left
root.value
c
exit
root.value
root.first
root
c
x
c
x
exit
exity
x
c
exit
rte2
rte1
rte
c
exit
rte
rte1
rte2
c
root
exit
root.exikt
c
exit
root.to_a
c
root
exit
root.to_a
c
exit
root.node_count
exit
root.size
root
c
exit
root.to_a
root.to_A
root
exit
c
root.to_a
exit
root.to_a
exit
eval n
exit
eval n
n
exit
root.deserialize(root)
root deserialize
root
n
where
root
exit
eval root
root
c
exit
root.nodes
root
exit
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].count
address[1].children[0].children[0].children[0].children[0].children[0].value
address[1].children[0].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children[0]
address[1].children[0].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].children[0].children
address[1].children[0].children[0].children[0].children[0].count
address[1].children[0].children[0].children[0].children.count
address[1].children[0].children[0].children[0].childrent.count
address[1].children[0].children[0].children[0].count
address[1].children[0].children[0].children[0]
address[1].children[0].children[0].children.count
address[1].children[0].children[0]
address[1].children[0].children.count
address[1].children[0].count
address[1].children[0]
address[1].children
address[1].children.count
address[1].children
address[1]
exit
address[1].children
address[1]
exit
c
address[2].size
address[2]
address[1]
address[0]
address.count
address
c
root
exit
root
rooot
exit
root
to
from
