exit
c
exit
c
numDown
c
ssf
c
print ssf.slice(0..j)
eval i == n
eval i
eval n
n
c
arr
ssf
exit
c
exit
arr. length
eval i
i
exit
arr.length
eval i
i
arr
exit
eval arr[j]
eval j
eval i
exit
arr[i]
arr[j]
j
arr.length
eval i
i
arr
exit
arr
exit
c
n
eval i
eval j
n
arr.length
c
arr
n
arr
eval i
i
c
arr
exit
arr
arr[0]
output
eval i
i
exit
E
C
exit
c
exit
left_counter
left[left_counter]
output_array
right
left
c
exit
exirt
exit
left_counter
left.count
left_count
right.count
right
right_counter
left_counter
c
exit
arr[0]
last_array
exit
c
exit
c
output_array
c
right
left
c
exit
arr.length
end_1
end_
exit
x > arr[initial_pivot]
x
exit
c
output_hash.keys
c
output_hash.keys
output_hash
c
output_array
exit
texit
exi
c
exit
c
arr
exit
c
exit
output_array.sort!
output_array
exit
temp_array
first_term_index
third_term_index
sum
third_term
second_term
first_term
exit
sum
exit
eval i
i
right_index
third_term_index
c
exit
c
exit
temp_hash.keys
temp_hash
exit
key
exit
key
exit
key
exit
temp_hash.keys
exit
third_term
arr[right_index]
eval right_index
eval i
i
third_term
exit
right_value
arr[i]
right_index
third_term
exit
c
exit
negate_amount(sum)
sum
right_value
eval i
i
right_index
arr[right_index]
arr
eval i
eval ik
i
adder_index
exit
c
down
s
c
n
help
c
exit
input_string.split('').sort!
input_string.split('')
input_string.split()
input_string
arr
exit
temp_hash
temp_hash.values
exit
temp_hash.keys
temp_hash
exit
c
exit
temp_hash
exit
arr[right_index-1]
arr[right_index]
arr
right_index
right_indes
sum
exit
exitg
output_array
c
output_array
exit
negate_amount(sum)
sum
amount
exit
sum
output_array
exit
arr.contains?(4)
sum
exit
arr[i]
arr[i[
eval i
i
left_value
right_value
exit
right_index
arr[right_index]
arr[left_index]
right_index
left_index
exit
left_index
exit
left_index
right_index
right_value
exit
arr.count
right_index
arr[right_index]
temp_hash[value]
exit
arr
value
eval i
i
right_index
