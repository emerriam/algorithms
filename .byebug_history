c
exit
j
i
c
v
c
left_array
right_array
exit
midpoint
left_array
right_array
exit
v
exit
midpoint
exit
arr.length
midpoint
c
eval c
c
eval c
c
eval c
c
eval c
exit
c
candidatec
candidate.to_s
candidate
exit
c
exit
candidate.join(",")
candidate.to_s.join(",")
candiate.to_s.join(",")
candiate.join
candidate
c
candidate
exit
root
last_node
last_node.public_methods
last_node
new_node
side
last_node
exit
last_node
root.words
root
last_node.words
down
where
up
where
up
where
up
where
down
where
down
where
c
n
numLeft
c
last_node.right
last_node.left
last_node
c
last_node.each
last_node.right
last_node.left
last_node
n
new_node
last_node.left
last_node.right
last_node
c
exit
root
output
c
eval n
output
c
eval n
n
root
output
exit
n
eval n
n
eval n
c
eval n
n
exit
eval n
exit
n
exit
eval n
n
root.left
root.count_all
root
n
c
root
n
root
c
"gd", 1
$root.right.right.right
$root.right.right
$root.right
$root.left
$root.words
exit
$root.words
$root.count_all
$root.count_All
exit
$root
c
$root
root
c
exit
countPaths(arr, x+1, y)
y
x
where
c
exit
y
x
down
y
x
where
down
y
x
where
down
y
x
where
up
where
up
where
up
where
up
where
up
where
up
where
down
help where
where help
where
n
where
tracevar
pry
info program
info
help
c
down
help
n
b
c
set post_mortem on
show post_mortem on
show post_mortem
show
help
exit
c
exit
c
numDown
c
ssf
c
print ssf.slice(0..j)
eval i == n
eval i
eval n
n
c
arr
ssf
exit
c
exit
arr. length
eval i
i
exit
arr.length
eval i
i
arr
exit
eval arr[j]
eval j
eval i
exit
arr[i]
arr[j]
j
arr.length
eval i
i
arr
exit
arr
exit
c
n
eval i
eval j
n
arr.length
c
arr
n
arr
eval i
i
c
arr
exit
arr
arr[0]
output
eval i
i
exit
E
