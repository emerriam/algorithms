exit
c
candidate_a.length
candidate_a
candidate
eval i
i
c
exit
c_b
c
candidate_a[j]
candidate_a[j] == candidate_b[j]
exit
c
cc
c
exit
c
c_b.length
c
candidate_a[j]
c
candidate_a[i]
candidate_a
exit
candidate_a
exit
exi
c_a
c_A
eval c_b
eval i
i
exit
eval candidate_b
c
eval i
i
c
eval i
i
c
candidate_b
candidate_a
c
input.to_h
input.to_hash
c
exit
c
exit
c
emp_hash[employee]
emp_hash
employee
c
spaces
exit
spaces = get_spaces_count(arr, employee[0], eployee[1], 0)
c
employee[1]
employee[0]
employee
exit
c
cc
c
cc
c
cc
c
indx
i
j
exit
c
index
value
exit
value
c
level_count
exit
employee_id
employees
employee_id
employees[employee_id]
level_count
exit
c
manager
employee
c
employees
managers
c
emps.keys.sort
emps.sort
emps.sort!
emps
mans
c
employee_hash
employee
managers
c
managers
manages
exit
c
manager
id
c
manager
id
exit
c
employee_hash
item
c
employee_hash
exit
employees
c
managers
exit
managers
exit
managers
c
managers
c
managers
c
employee_hash
exit
employee_hash
exit
letter_hash
letter_hash.to_h
letter_hash.public_methods
.
this
self
graph.graph
exit
graph.public_methods
letter_hash
c
words
c
where
c
where
c
den_hash
c
x
exit
x.class
x
x.to_i
x.class
x
exit
eit
den_hash
c
den_hash
exit
c
y
c
y
c
y
c
y
c
y
c
y
exit
intDenominations
exit
c
intDenominations_count
exit
intDenominations
c
intDenominations
c
d
n
d
n
d
n
d
c
d[0].length
d.length
d
c
costs[word2.length]
word2.length
costs
c
costs
c
exit
exi
strWord1.chars.sort.join
strWord2.chars.sort.join
strWord2.chars.sort!
strWord2.chars.sort
strWord2.sort!
strWord1.size
exit
letter_a
letter_b
letter_B
c
instructions
c
exit
eval n
steps
c
exit
x
exit
eval step
eval stp
c
cc
c
eval step
c
eval step
c
eval step
c
eval step
exit
step
c
eval step
exit
step
exit
steps
amount
exit
eval n
