exit
children.count
children
c
node.data
c
node.data
cc
node.data
c
node.data
c
node.data
exit
trie.output
c
exit
path
c
path
c
path
c
path
c
path
c
path
c
path.pop
c
path.pop
c
path.pop
c
path.pop
exit
trie.output
exit
children.each {|child| print "child is: #{child.data}\n"}
children.each do {|child| print "child is: #{child.data}\n"}
children
character
exit
child.children
child
exit
node.values
node.keys
node.children[1]
node.children[2]
node.children[0]
node.children["c"]
node.children["c"]\
node.children.count
node.children
node.children{"x"}
node.children{"x"}.class
node.children{"c"}.class
node.children{"c"}
character
node
node.children{"c"}
node.children{character}[1]
node.children{character}[0]
node.children{character}
node
exit
c
node.children[0].children.each {|child| print "#{child.data}\n"}
node.children.each {|child| print "#{child.data}\n"}
exit
c
node.children.each {|child| print "#{child.data}\n"}
node.children.each {|child| print "#{child}\n"}
trie.root.children[2].children.each {|child| print "#{terminates}\n"}
node.children
node
c
exit
node[1]
node[0]
node
node.terminates
n
path
@output
node
exit
node.children{character}
character
node.children[character]
node
c
exit
node.children[1]
node.children[0]
node.children
node.data
node.value
node
node.children
node
node.children.count
node.children
node.children[i]
eval i
i
node.children[i]
node.children
ndoe.children
node
c
trie.output
x
exit
@output
x
exit
c
exit
node.children[i].terminates
node.children[i].terminates\
node.children[i]
!node.have?(character)
n
!node.have?(character)
character
node.data
node
c
!node.have?("c")
node.have?("c")
node
c
x
c
trie.root.children[2].children.each {|child| print "#{child.terminates}\n"}
trie.root.children[2].children.each {|child| print "#{terminates}\n"}
trie.root.children[2].children.each {|child| print "#{child.data}\n"}
trie.root.children[1].children.each {|child| print "#{child.data}\n"}
trie.root.children[0].children.each {|child| print "#{child.data}\n"}
trie.root.children.second.children.each {|child| print "#{child.data}\n"}
trie.root.children.first.children.each {|child| print "#{child.data}\n"}
trie.root.children.first.each {|child| print "#{child.data}\n"}
trie.root.children.each {|child| print "#{child.data}\n"}
trie.root.children.each do  {|child| print "#{child.data}\n"}}
trie.root.children.each do  {|child| print "#{child.data}\n"}
trie.root.children.first
trie.root.children.each {|child| print "#{child.data}\n"}
trie.root.children.each {|child| print "#{child.data}\n"
trie.root.children.each {|child| print child.data}
trie.children.each {|child| print child.data}
tree.children.each {|child| print child.data}
trie.root.data
trie.root
root
trie.root.children[0]
trie.root.children
trie.root
trie
c
output
c
output
c
output
exit
output
c
exit
output
c
exit
output
outptu
x
c
output
c
output
c
output
exit
output
path
output
outptu
c
output
exit
output
path
path.join(output)
exit
path
output
output.join(path.to_a)
path
output
exit
output
path
output.class
output.join(path.to_a)
output
output.
path.to_a
path.to_A
exit
output
path
output
output.join(path)
path
c
child
node
path
c
exit
node
nodee
output
c
output
c
path
c
path
node
c
exit
output.join(path)
output
path
exit
output.class
output.join(path)
exit
output + path
output.join(path)
path
output.join(path)
outptu.join(path)
path.to_a
path
node.terminates
exit
node.children[i]
node
exit
prefix[i]
eval i
i
exit
