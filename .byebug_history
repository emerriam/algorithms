c
eval n
n
nums
exit
nums
eval n
c
n
c
products
c
exit
products
c
products
c
products
exit
products
exit
c
exit
a
target
a
a[2]
a[1]
a[0]
a[1][0]
!!target.match(/#{a[0]} #{a[1][0]} #{a[2]}/)
target
a
a[2]
a[1]
a[0]
a
c
exit
target
a
c
a
target
c
exit
exi
c
n
a
target
c
target
aa
exit
exxit
a[1][1]
a[1]
a
exit
a
exit
a[1][1] != nil
a[1][1] == nil
a
exit
a
c
exit
a[1]
a[1][1]
a
exit
a
a[1][1]
a[1]
c
parents[amount]
amount
parents
c
exit
output.inject(0){|sum,x| sum + x }
output.sum
output
exit
a
a.floor
exit
dp_table
dp_table[value]
c
dp_table[value]
exit
dp_table[value]
dp_table
c
dp_table[value]
dp_table
exit
dp_table[value]
value
exit
value
[value]
dp_table
c
eval i
i
j
exit
c
denominations[i]
exit
eval i
i
exit
c
exit
c
dp_table
dp_table[i]
exit
c
denominations[i]
eval i
i
j
exit
eval i
i
j
exit
c
exit
dp_table
c
dp_table
c
exit
amount
c
amount
c
cc
c
exit
c
cc
c
cc
c
exit
denominations[indx] <= amount
denominations[indx]
denominations.length
indx
exit
coins
c
exit
coins
c
amount
coins
c
d
c
d
c
exit
d[i-1][j-1]+1
d[i][j-1]+1
d[i-1][j]+1
d[i-1][j]
d[i][j]
d[i]
exit
d
exit
d
exit
d
c
d
operation_array
c
d
exit
d
c
d
c
grid
c
grid
exit
grid
exit
grid
c
long_word
long
c
d
exit
grid
c
exit
d
c
exit
d
exit
d[0]
d
exit
word1.chars.sort.join
word1.chars.sort.join!
word1
exit
word1
word2
exit
exi
[strWord1, strWord2].max_by(&:length)
c
char_num
y
exit
strWord2
strWord1
char_num.size
char_num
c
['one','two','three','four','five'].select{|char_num| char_num.size.max} 
c
self
candidate
exit
alias_array
c
alias_array
_alias
c
alias_array
c
alias_array
exit
c
query.to_string
query
exit
query.to_string
query
c
