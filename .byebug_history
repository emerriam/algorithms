exit
n
c
exit
root.value
root.val
root
n
exit
n
display current
display
help
help watch
exit
root
exit
root.right
root.left
root
exit
c
root.left
exit
root.right
root.left
exit
root
c
exit
root.right?
root.value
c
root.value
c
root.value
root
c
n
root
root == nil
c
exit
root.value == nil
root.value
c
exit
root.value == nil
root.value?
root.value
c
root.value
c
root.value
root.nil?
c
exit
root
root.value
root
c
exit
root.value
root.class
root
c
n
root
exit
root.nil
c
root
c
exit
exigt
root.value
root
c
exit
root
root.left
c
exit
exitg
root
root == "#"
root == #
root == '#'
root
c
exit
root
root.left
c
root.left
root
c
exit
root.left?
root.left
c
exit
root
root.inspect
value
root.value
exit
root.right.left
root.right
root
root.right.right.right
exit
root.right.right.right
root.right.right
root.right
root.left
root.first
root
exit
root
exit
root.to_a
root.to_arr
exit
root.left.class
root.inspect
exit
root.left.left.left
root.left.left
root.left
root
c
root_node.value
value
c
root_node.value.to_i
root_node.value.to_s
root_node.value
value
exit
self.root_value
root_value
new_tree.root_node
new_tree
n
c
self.root_node
self
self.root
self.root_value
size
arr
c
root
root_node
root
exit
self
self.root_node
root_node
exit
root
exit
self.root_node
self
root_node
value
exit
exiy
exitr
root_node
value
c
value
exit
root_node
value
exit
self.root_node
self
exit
tree.root_node
exit
tree.left
tree.root
tree
tree'
treew
exit
exitr
node.left
node.left.nil?
node.right
node.left
node.public_methods
node
exit
tree.right
tree.left
tree
tree.length
exit
tree.to_a
tree
exit
tree.to_a
tree.size
tree.length
tree.inspect
tree.public_methods
tree[45]
tree.right.value
tree.left.value
tree.value
tree.right
tree.left
tree[0]
tree
exit
root.left.left
root.left
left
root
exit
left
root[3].left
root
n
tree.insert
tree.right
tree.left
tree
c
output
c
output
exit
output
exit
eval _open
eval n
n
_close
_open
exit
candidate
arr
ar
c
exit
c
arr
c
arr
c
arr
