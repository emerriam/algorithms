c
d
n
d
n
d
n
d
c
d[0].length
d.length
d
c
costs[word2.length]
word2.length
costs
c
costs
c
exit
exi
strWord1.chars.sort.join
strWord2.chars.sort.join
strWord2.chars.sort!
strWord2.chars.sort
strWord2.sort!
strWord1.size
exit
letter_a
letter_b
letter_B
c
instructions
c
exit
eval n
steps
c
exit
x
exit
eval step
eval stp
c
cc
c
eval step
c
eval step
c
eval step
c
eval step
exit
step
c
eval step
exit
step
exit
steps
amount
exit
eval n
steps
exit
eval n
eval steps
c
n
steps
c
exit
if output[0]
output
c
output
c
n
c
output
c
split_words.length
c
output
exit
output
c
exit
s.split(' ')
eval s
s
words
split_words
c
exit
eval i
i
n
matrix
start_column
end_column
exit
trie.to_a
trie
exit
children.count
children
c
node.data
c
node.data
cc
node.data
c
node.data
c
node.data
exit
trie.output
c
exit
path
c
path
c
path
c
path
c
path
c
path
c
path.pop
c
path.pop
c
path.pop
c
path.pop
exit
trie.output
exit
children.each {|child| print "child is: #{child.data}\n"}
children.each do {|child| print "child is: #{child.data}\n"}
children
character
exit
child.children
child
exit
node.values
node.keys
node.children[1]
node.children[2]
node.children[0]
node.children["c"]
node.children["c"]\
node.children.count
node.children
node.children{"x"}
node.children{"x"}.class
node.children{"c"}.class
node.children{"c"}
character
node
node.children{"c"}
node.children{character}[1]
node.children{character}[0]
node.children{character}
node
exit
c
node.children[0].children.each {|child| print "#{child.data}\n"}
node.children.each {|child| print "#{child.data}\n"}
exit
c
node.children.each {|child| print "#{child.data}\n"}
node.children.each {|child| print "#{child}\n"}
trie.root.children[2].children.each {|child| print "#{terminates}\n"}
node.children
node
c
exit
node[1]
node[0]
node
node.terminates
n
path
@output
node
exit
node.children{character}
character
node.children[character]
node
c
exit
node.children[1]
node.children[0]
node.children
node.data
node.value
node
node.children
node
node.children.count
node.children
node.children[i]
eval i
i
node.children[i]
node.children
ndoe.children
node
c
trie.output
x
exit
@output
x
exit
c
exit
node.children[i].terminates
node.children[i].terminates\
node.children[i]
!node.have?(character)
n
!node.have?(character)
character
node.data
node
c
!node.have?("c")
node.have?("c")
node
c
x
c
trie.root.children[2].children.each {|child| print "#{child.terminates}\n"}
trie.root.children[2].children.each {|child| print "#{terminates}\n"}
trie.root.children[2].children.each {|child| print "#{child.data}\n"}
trie.root.children[1].children.each {|child| print "#{child.data}\n"}
trie.root.children[0].children.each {|child| print "#{child.data}\n"}
trie.root.children.second.children.each {|child| print "#{child.data}\n"}
trie.root.children.first.children.each {|child| print "#{child.data}\n"}
trie.root.children.first.each {|child| print "#{child.data}\n"}
trie.root.children.each {|child| print "#{child.data}\n"}
trie.root.children.each do  {|child| print "#{child.data}\n"}}
trie.root.children.each do  {|child| print "#{child.data}\n"}
trie.root.children.first
trie.root.children.each {|child| print "#{child.data}\n"}
trie.root.children.each {|child| print "#{child.data}\n"
