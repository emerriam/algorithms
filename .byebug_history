c
down
s
c
n
help
c
exit
input_string.split('').sort!
input_string.split('')
input_string.split()
input_string
arr
exit
temp_hash
temp_hash.values
exit
temp_hash.keys
temp_hash
exit
c
exit
temp_hash
exit
arr[right_index-1]
arr[right_index]
arr
right_index
right_indes
sum
exit
exitg
output_array
c
output_array
exit
negate_amount(sum)
sum
amount
exit
sum
output_array
exit
arr.contains?(4)
sum
exit
arr[i]
arr[i[
eval i
i
left_value
right_value
exit
right_index
arr[right_index]
arr[left_index]
right_index
left_index
exit
left_index
exit
left_index
right_index
right_value
exit
arr.count
right_index
arr[right_index]
temp_hash[value]
exit
arr
value
eval i
i
right_index
right_value
c
exit
entry
exit
exitg
entry
hashy
exit
hashy
exit
hashy
exit
current_value
value
exit
current_value
current_key
existing_key
existing_value
exit
existing_value
current_value
current_key
exit
exity
current
current = hashy[key]
key
hashy
exit
input_hash
hashy
exit
input_hash.has_key?(key)
input_hash
value
key
exit
hashy
current
exit
x
exit
c
x
c
exit
self
n
self
self[child]
root
self[root]
self
n
self
n
self
n
self
n
self
n
self
n
self
n
self
c
x
c
child
n
(root * 2) + 1
n
(root * 2) + 1
self[root]
start
root
self
exit
self
n
count
start
exit
c
n
c
self[10]
child
self[4]
self[3]
self[2]
self[1]
self[0]
self
root
self[root]
c
exit
[child]
self[child]
arr[child]
root
child
